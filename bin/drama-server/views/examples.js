var examples = {
    send_to_self : "behaviour sender () {\n  send self (1)\n  receive\n    (NumberV x) ->\n      ()\n  done\n}\n\ncreate sender ()",
    acknowledge : "behaviour chatterbox (mate) {\n  send mate (self)\n  receive\n    (NumberV x) ->\n      ()\n  done\n}\n\nbehaviour acknowledge () {\n  ()\n  receive\n    (ActorV adr) ->\n      send adr (1)\n  done\n}\n\nbehaviour starter () {\n  let ack = create acknowledge () in\n    create chatterbox (ack)\n  receive\n    () -> ()\n  done\n}\n\ncreate starter ()",
    prod_cons : "behaviour producer () {\n  ()\n  receive\n    (ActorV id, StringV msg) ->\n      if (msg == \"ready\") then {\n        send id (\"job\")\n      } else {\n        ()\n      }\n  done\n}\n\nbehaviour consumer (prod) {\n  send prod (self, \"ready\")\n  receive\n    (StringV job) ->\n      if (job == \"stop\") then {\n        ()\n      } else {\n        send prod (self, \"ready\")\n      }\n  done\n}\n\nbehaviour creater () {\n  let prod = create producer () in\n    create consumer (prod)\n  receive\n    () -> ()\n  done\n}\n\ncreate creater ()",
    ns : "behaviour alice (kpb, ksa) {\n  // bob's address is actually impostor's address\n  // kpb is actually kpi\n  let bob_address = 4 in\n  let my_nonce = \"alice nonce\" in\n    send bob_address (encrypt my_nonce kpb, self)\n  receive\n    // response from impostor (bob's msg unchanged)\n    // both nonces encrypted with kpa\n    (EncryptedV na_enc, EncryptedV nb_enc) ->\n      let na = decrypt na_enc ksa in\n      let nb = decrypt nb_enc ksa in\n          send bob_address (encrypt nb kpb)\n  done\n}\n\nbehaviour impostor (bob, alice, kpb, ksi) {\n  ()\n  receive\n    // relay msg from alice to bob (change encryption)\n    // impostor learns first nonce\n    (EncryptedV na_enc, ActorV alice_address) ->\n      let na = decrypt na_enc ksi in\n      send bob (encrypt na kpb, encrypt self kpb)\n\n    // response from bob\n    (EncryptedV na_enc, EncryptedV nb_enc) ->\n      send alice (na_enc, nb_enc)\n\n    // second msg from alice\n    // impostor learns second nonce\n    (EncryptedV nb_enc) ->\n      let nb = decrypt nb_enc ksi in\n        send bob (encrypt nb kpb)\n  done\n}\n\nbehaviour bob (kpa, ksb) {\n  let my_nonce = \"bob nonce\" in\n    ()\n  receive\n    // message from impostor\n    // \"alice_address\" is impostor's address\n    (EncryptedV na_enc, EncryptedV alice_address) ->\n      let na = decrypt na_enc ksb in\n      let alice = decrypt alice_address ksb in\n        send alice (encrypt na kpa, encrypt my_nonce kpa)\n  done\n}\n\nbehaviour starter () {\n  let bob = create bob (\"alicekey\", \"yekbob\") in\n  let alice = create alice (\"impostorkey\", \"yekecila\") in\n  let impostor = create impostor (bob, alice, \"bobkey\", \"yekrotsopmi\") in\n    ()\n  receive\n    () -> ()\n  done\n}\n\ncreate starter ()",
    nsf : "behaviour alice (kpb, ksa) {\n  // bob's address is actually impostor's address\n  // kpb is actually kpi\n  let bob_address = 4 in\n  let my_nonce = \"alice nonce\" in\n    send bob_address (encrypt my_nonce kpb, self)\n  receive\n    // response from impostor (bob's msg unchanged)\n    // both nonces encrypted with kpa\n    (EncryptedV na_enc, EncryptedV nb_enc, EncryptedV bob_enc) ->\n      let na = decrypt na_enc ksa in\n      let nb = decrypt nb_enc ksa in\n      let bob = decrypt bob_enc ksa in\n        if (bob == bob_address) then {\n          send bob (encrypt nb kpb)\n        } else {\n          ()\n        }\n  done\n}\n\nbehaviour impostor (bob, alice, kpb, ksi) {\n  ()\n  receive\n    // relay msg from alice to bob (change encryption)\n    // impostor learns first nonce\n    (EncryptedV na_enc, ActorV alice_address) ->\n      let na = decrypt na_enc ksi in\n        send bob (encrypt na kpb, encrypt self kpb)\n\n    // response from bob\n    (EncryptedV na_enc, EncryptedV nb_enc, EncryptedV bob_enc) ->\n      send alice (na_enc, nb_enc, bob_enc)\n\n    // second msg from alice\n    // impostor learns second nonce\n    (EncryptedV nb_enc) ->\n      let nb = decrypt nb_enc ksi in\n        send bob (encrypt nb kpb)\n  done\n}\n\nbehaviour bob (kpa, ksb) {\n  let my_nonce = \"bob nonce\" in\n    ()\n  receive\n    // message from impostor\n    // \"alice_address\" is impostor's address\n    (EncryptedV na_enc, EncryptedV alice_address) ->\n      let na = decrypt na_enc ksb in\n      let alice = decrypt alice_address ksb in\n        send alice (encrypt na kpa, encrypt my_nonce kpa, encrypt self kpa)\n  done\n}\n\nbehaviour starter () {\n  let bob = create bob (\"alicekey\", \"yekbob\") in\n  let alice = create alice (\"impostorkey\", \"yekecila\") in\n  let impostor = create impostor (bob, alice, \"bobkey\", \"yekrotsopmi\") in\n    ()\n  receive\n    () -> ()\n  done\n}\n\ncreate starter ()"
};
