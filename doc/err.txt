-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from Happy.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseDrama -> Program                       (0)
	Program -> BehaviourList Instantiation             (1)
	BehaviourList -> Behaviour                         (2)
	BehaviourList -> BehaviourList Behaviour           (3)
	Behaviour -> behaviour identifier FormalParam Exp Receive   (4)
	Receive -> receive Handling done                   (5)
	Handling -> '(' Msg ')' '->' Exp                   (6)
	Handling -> Handling '(' Msg ')' '->' Exp          (7)
	Msg ->                                             (8)
	Msg -> identifier                                  (9)
	Msg -> Msg ',' identifier                          (10)
	Exp -> '(' ')'                                     (11)
	Exp -> identifier                                  (12)
	Exp -> int                                         (13)
	Exp -> send identifier '(' Msg ')'                 (14)
	Exp -> let identifier '=' Exp in Exp               (15)
	Exp -> create identifier ActualParam               (16)
	Instantiation -> create identifier ActualParam     (17)
	FormalParam ->                                     (18)
	FormalParam -> FormalParam identifier              (19)
	ActualParam ->                                     (20)
	ActualParam -> ActualParam Value                   (21)
	Value -> int                                       (22)
	Value -> identifier                                (23)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	create         { Create }
	behaviour      { Behaviour }
	send           { Send }
	receive        { Receive }
	done           { Done }
	let            { Let }
	in             { In }
	int            { Int $$ }
	identifier     { Identifier $$ }
	'='            { Equals }
	'('            { OpenPar }
	')'            { ClosePar }
	','            { Comma }
	'->'           { Handle }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseDrama rule  0
	Program         rule  1
	BehaviourList   rules 2, 3
	Behaviour       rule  4
	Receive         rule  5
	Handling        rules 6, 7
	Msg             rules 8, 9, 10
	Exp             rules 11, 12, 13, 14, 15, 16
	Instantiation   rule  17
	FormalParam     rules 18, 19
	ActualParam     rules 20, 21
	Value           rules 22, 23

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	behaviour      shift, and enter state 4

	Program        goto state 5
	BehaviourList  goto state 2
	Behaviour      goto state 3

State 1


	behaviour      shift, and enter state 4

	BehaviourList  goto state 2
	Behaviour      goto state 3

State 2

	Program -> BehaviourList . Instantiation            (rule 1)
	BehaviourList -> BehaviourList . Behaviour          (rule 3)

	create         shift, and enter state 9
	behaviour      shift, and enter state 4

	Behaviour      goto state 7
	Instantiation  goto state 8

State 3

	BehaviourList -> Behaviour .                        (rule 2)

	create         reduce using rule 2
	behaviour      reduce using rule 2


State 4

	Behaviour -> behaviour . identifier FormalParam Exp Receive    (rule 4)

	identifier     shift, and enter state 6


State 5

	%start_parseDrama -> Program .                      (rule 0)

	%eof           accept


State 6

	Behaviour -> behaviour identifier . FormalParam Exp Receive    (rule 4)

	create         reduce using rule 18
	send           reduce using rule 18
	let            reduce using rule 18
	int            reduce using rule 18
	identifier     reduce using rule 18
	'('            reduce using rule 18

	FormalParam    goto state 11

State 7

	BehaviourList -> BehaviourList Behaviour .          (rule 3)

	create         reduce using rule 3
	behaviour      reduce using rule 3


State 8

	Program -> BehaviourList Instantiation .            (rule 1)

	%eof           reduce using rule 1


State 9

	Instantiation -> create . identifier ActualParam    (rule 17)

	identifier     shift, and enter state 10


State 10

	Instantiation -> create identifier . ActualParam    (rule 17)

	int            reduce using rule 20
	identifier     reduce using rule 20
	%eof           reduce using rule 20

	ActualParam    goto state 19

State 11

	Behaviour -> behaviour identifier FormalParam . Exp Receive    (rule 4)
	FormalParam -> FormalParam . identifier             (rule 19)

	create         shift, and enter state 13
	send           shift, and enter state 14
	let            shift, and enter state 15
	int            shift, and enter state 16
	identifier     shift, and enter state 17
	'('            shift, and enter state 18

	Exp            goto state 12

State 12

	Behaviour -> behaviour identifier FormalParam Exp . Receive    (rule 4)

	receive        shift, and enter state 28

	Receive        goto state 27

State 13

	Exp -> create . identifier ActualParam              (rule 16)

	identifier     shift, and enter state 26


State 14

	Exp -> send . identifier '(' Msg ')'                (rule 14)

	identifier     shift, and enter state 25


State 15

	Exp -> let . identifier '=' Exp in Exp              (rule 15)

	identifier     shift, and enter state 24


State 16

	Exp -> int .                                        (rule 13)

	receive        reduce using rule 13
	done           reduce using rule 13
	in             reduce using rule 13
	'('            reduce using rule 13


State 17

	Exp -> identifier .                                 (rule 12)
	FormalParam -> FormalParam identifier .             (rule 19)

	create         reduce using rule 19
	send           reduce using rule 19
	receive        reduce using rule 12
	let            reduce using rule 19
	int            reduce using rule 19
	identifier     reduce using rule 19
	'('            reduce using rule 19


State 18

	Exp -> '(' . ')'                                    (rule 11)

	')'            shift, and enter state 23


State 19

	Instantiation -> create identifier ActualParam .    (rule 17)
	ActualParam -> ActualParam . Value                  (rule 21)

	int            shift, and enter state 21
	identifier     shift, and enter state 22
	%eof           reduce using rule 17

	Value          goto state 20

State 20

	ActualParam -> ActualParam Value .                  (rule 21)

	receive        reduce using rule 21
	done           reduce using rule 21
	in             reduce using rule 21
	int            reduce using rule 21
	identifier     reduce using rule 21
	'('            reduce using rule 21
	%eof           reduce using rule 21


State 21

	Value -> int .                                      (rule 22)

	receive        reduce using rule 22
	done           reduce using rule 22
	in             reduce using rule 22
	int            reduce using rule 22
	identifier     reduce using rule 22
	'('            reduce using rule 22
	%eof           reduce using rule 22


State 22

	Value -> identifier .                               (rule 23)

	receive        reduce using rule 23
	done           reduce using rule 23
	in             reduce using rule 23
	int            reduce using rule 23
	identifier     reduce using rule 23
	'('            reduce using rule 23
	%eof           reduce using rule 23


State 23

	Exp -> '(' ')' .                                    (rule 11)

	receive        reduce using rule 11
	done           reduce using rule 11
	in             reduce using rule 11
	'('            reduce using rule 11


State 24

	Exp -> let identifier . '=' Exp in Exp              (rule 15)

	'='            shift, and enter state 33


State 25

	Exp -> send identifier . '(' Msg ')'                (rule 14)

	'('            shift, and enter state 32


State 26

	Exp -> create identifier . ActualParam              (rule 16)

	receive        reduce using rule 20
	done           reduce using rule 20
	in             reduce using rule 20
	int            reduce using rule 20
	identifier     reduce using rule 20
	'('            reduce using rule 20

	ActualParam    goto state 31

State 27

	Behaviour -> behaviour identifier FormalParam Exp Receive .    (rule 4)

	create         reduce using rule 4
	behaviour      reduce using rule 4


State 28

	Receive -> receive . Handling done                  (rule 5)

	'('            shift, and enter state 30

	Handling       goto state 29

State 29

	Receive -> receive Handling . done                  (rule 5)
	Handling -> Handling . '(' Msg ')' '->' Exp         (rule 7)

	done           shift, and enter state 39
	'('            shift, and enter state 40


State 30

	Handling -> '(' . Msg ')' '->' Exp                  (rule 6)

	identifier     shift, and enter state 37
	')'            reduce using rule 8
	','            reduce using rule 8

	Msg            goto state 38

State 31

	Exp -> create identifier ActualParam .              (rule 16)
	ActualParam -> ActualParam . Value                  (rule 21)

	receive        reduce using rule 16
	done           reduce using rule 16
	in             reduce using rule 16
	int            shift, and enter state 21
	identifier     shift, and enter state 22
	'('            reduce using rule 16

	Value          goto state 20

State 32

	Exp -> send identifier '(' . Msg ')'                (rule 14)

	identifier     shift, and enter state 37
	')'            reduce using rule 8
	','            reduce using rule 8

	Msg            goto state 36

State 33

	Exp -> let identifier '=' . Exp in Exp              (rule 15)

	create         shift, and enter state 13
	send           shift, and enter state 14
	let            shift, and enter state 15
	int            shift, and enter state 16
	identifier     shift, and enter state 35
	'('            shift, and enter state 18

	Exp            goto state 34

State 34

	Exp -> let identifier '=' Exp . in Exp              (rule 15)

	in             shift, and enter state 45


State 35

	Exp -> identifier .                                 (rule 12)

	receive        reduce using rule 12
	done           reduce using rule 12
	in             reduce using rule 12
	'('            reduce using rule 12


State 36

	Msg -> Msg . ',' identifier                         (rule 10)
	Exp -> send identifier '(' Msg . ')'                (rule 14)

	')'            shift, and enter state 44
	','            shift, and enter state 43


State 37

	Msg -> identifier .                                 (rule 9)

	')'            reduce using rule 9
	','            reduce using rule 9


State 38

	Handling -> '(' Msg . ')' '->' Exp                  (rule 6)
	Msg -> Msg . ',' identifier                         (rule 10)

	')'            shift, and enter state 42
	','            shift, and enter state 43


State 39

	Receive -> receive Handling done .                  (rule 5)

	create         reduce using rule 5
	behaviour      reduce using rule 5


State 40

	Handling -> Handling '(' . Msg ')' '->' Exp         (rule 7)

	identifier     shift, and enter state 37
	')'            reduce using rule 8
	','            reduce using rule 8

	Msg            goto state 41

State 41

	Handling -> Handling '(' Msg . ')' '->' Exp         (rule 7)
	Msg -> Msg . ',' identifier                         (rule 10)

	')'            shift, and enter state 49
	','            shift, and enter state 43


State 42

	Handling -> '(' Msg ')' . '->' Exp                  (rule 6)

	'->'           shift, and enter state 48


State 43

	Msg -> Msg ',' . identifier                         (rule 10)

	identifier     shift, and enter state 47


State 44

	Exp -> send identifier '(' Msg ')' .                (rule 14)

	receive        reduce using rule 14
	done           reduce using rule 14
	in             reduce using rule 14
	'('            reduce using rule 14


State 45

	Exp -> let identifier '=' Exp in . Exp              (rule 15)

	create         shift, and enter state 13
	send           shift, and enter state 14
	let            shift, and enter state 15
	int            shift, and enter state 16
	identifier     shift, and enter state 35
	'('            shift, and enter state 18

	Exp            goto state 46

State 46

	Exp -> let identifier '=' Exp in Exp .              (rule 15)

	receive        reduce using rule 15
	done           reduce using rule 15
	in             reduce using rule 15
	'('            reduce using rule 15


State 47

	Msg -> Msg ',' identifier .                         (rule 10)

	')'            reduce using rule 10
	','            reduce using rule 10


State 48

	Handling -> '(' Msg ')' '->' . Exp                  (rule 6)

	create         shift, and enter state 13
	send           shift, and enter state 14
	let            shift, and enter state 15
	int            shift, and enter state 16
	identifier     shift, and enter state 35
	'('            shift, and enter state 18

	Exp            goto state 51

State 49

	Handling -> Handling '(' Msg ')' . '->' Exp         (rule 7)

	'->'           shift, and enter state 50


State 50

	Handling -> Handling '(' Msg ')' '->' . Exp         (rule 7)

	create         shift, and enter state 13
	send           shift, and enter state 14
	let            shift, and enter state 15
	int            shift, and enter state 16
	identifier     shift, and enter state 35
	'('            shift, and enter state 18

	Exp            goto state 52

State 51

	Handling -> '(' Msg ')' '->' Exp .                  (rule 6)

	done           reduce using rule 6
	'('            reduce using rule 6


State 52

	Handling -> Handling '(' Msg ')' '->' Exp .         (rule 7)

	done           reduce using rule 7
	'('            reduce using rule 7


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 24
Number of terminals: 14
Number of non-terminals: 12
Number of states: 53
